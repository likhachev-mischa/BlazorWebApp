@page "/PCCsPage"
@rendermode InteractiveServer
@using Lab
@using View
@inherits EntityBlazorPage<PhilosopherCountryConnection>
<h3>PCCsPage</h3>

<EntityTableTemplate TEntity="PhilosopherCountryConnection" TView="EntityView<PhilosopherCountryConnection>" Entities="m_displayedEntityList" View="View">
	<EntityEditForm>
		<p>@m_message</p>
		<EditForm Model="@m_pccData" OnSubmit="ValidateEntity">
			<p>
				Philosopher Id:<br/>
				<InputNumber @bind-Value="m_pccData.PhilosopherId"/>
			</p>
			<p>
				Country Id:<br/>
				<InputNumber @bind-Value="m_pccData.CountryId"/>
			</p>
			<p>
				Start Date:<br/>
				<InputDate @bind-Value="m_pccData.StartDate"/>
			</p>
			<p>
				Finish Date:<br/>
				<InputDate @bind-Value="m_pccData.FinishDate"/>
			</p>


			<p>
				<button type="submit">Create PCC</button>
			</p>
		</EditForm>
	</EntityEditForm>
	<PageButtons>
		<button class="btn btn-primary" disabled="@m_isDecreasePageDisabled" @onclick="DecreasePage">Prev Page</button>
		<button class="btn btn-primary" disabled="@m_isIncreasePageDisabled" @onclick="IncreasePage">Next Page</button>
	</PageButtons>
	<EntityHeaderEntry>
		<th>Id</th>
		<th>Philosopher Id</th>
		<th>Country Id</th>
		<th>Start date</th>
		<th>Finish date</th>
	</EntityHeaderEntry>
	<EntityTableEntry>
		<td>@context.PhilosopherCountryConnectionId</td>
		<td>@context.Philosopher.PhilosopherId</td>
		<td>@context.Country.CountryId</td>
		<td>@context.PeriodStart</td>
		<td>@context.PeriodEnd</td>
	</EntityTableEntry>
	<EntityDeleteButton>
		<td>
			<button class="btn btn-primary" @onclick="() => DeleteEntityAsync(context.PhilosopherCountryConnectionId)">Delete</button>
		</td>
	</EntityDeleteButton>
</EntityTableTemplate>

@code
{
	PCCData m_pccData = new();

	private string m_message = "";

	private void ValidateEntity()
	{
		m_message = "";
		View.UpdateReferencedEntities(m_pccData.PhilosopherId, typeof(Philosopher));
		View.UpdateReferencedEntities(m_pccData.CountryId, typeof(Country));
		Philosopher? philosopher = (Philosopher?)View.ReferencedEntities[typeof(Philosopher)];
		Country? country = (Country?)View.ReferencedEntities[typeof(Country)];
		if (philosopher == null)
		{
			m_message = "Invalid philosopher id!";
		}
		else if (country == null)
		{
			m_message += " Invalid country id!";
		}
		else
		{
			CreateEntity();
		}
	}

	protected override async Task CreateEntity()
	{
		await View.CreateEntityAsync(new PhilosopherCountryConnection()
		{
			Philosopher = (Philosopher)View.ReferencedEntities[typeof(Philosopher)],
			Country = (Country)View.ReferencedEntities[typeof(Country)],
			PeriodStart = m_pccData.StartDate,
			PeriodEnd = m_pccData.FinishDate
		});
		await FetchData();
	}

	private class PCCData
	{
		public int PhilosopherId;
		public int CountryId;
		public DateOnly StartDate;
		public DateOnly FinishDate;
	}

}