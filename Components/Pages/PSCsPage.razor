@page "/PsCsPage"
@rendermode InteractiveServer
@using Lab
@using View
@inherits EntityBlazorPage<PhilosopherStudentConnection>
<h3>PSCsPage</h3>

<EntityTableTemplate TEntity="PhilosopherStudentConnection" TView="EntityView<PhilosopherStudentConnection>" Entities="m_displayedEntityList" View="base.View">
	<EntityEditForm>
		<p>@m_message</p>
		<EditForm Model="@m_pscData" OnSubmit="ValidateEntity">
			<p>
				Teacher Id:<br/>
				<InputNumber @bind-Value="m_pscData.TeacherId"/>
			</p>
			<p>
				Student Id:<br/>
				<InputNumber @bind-Value="m_pscData.StudentId"/>
			</p>
			<p>
				Start Date:<br/>
				<InputDate @bind-Value="m_pscData.StartDate"/>
			</p>
			<p>
				Finish Date:<br/>
				<InputDate @bind-Value="m_pscData.FinishDate"/>
			</p>


			<p>
				<button type="submit">Create PCC</button>
			</p>
		</EditForm>
	</EntityEditForm>
	<PageButtons>
		<button class="btn btn-primary" disabled="@m_isDecreasePageDisabled" @onclick="DecreasePage">Prev Page</button>
		<button class="btn btn-primary" disabled="@m_isIncreasePageDisabled" @onclick="IncreasePage">Next Page</button>
	</PageButtons>
	<EntityHeaderEntry>
		<th>Id</th>
		<th>Teacher Id</th>
		<th>Student Id</th>
		<th>Start date</th>
		<th>Finish date</th>
	</EntityHeaderEntry>
	<EntityTableEntry>
		<td>@context.PhilosopherStudentConnectionId</td>
		<td>@context.Teacher.PhilosopherId</td>
		<td>@context.Student.PhilosopherId</td>
		<td>@context.PeriodStart</td>
		<td>@context.PeriodEnd</td>
	</EntityTableEntry>
	<EntityDeleteButton>
		<td>
			<button class="btn btn-primary" @onclick="() => DeleteEntityAsync(context.PhilosopherStudentConnectionId)">Delete</button>
		</td>
	</EntityDeleteButton>
</EntityTableTemplate>

@code
{
	PSCData m_pscData = new();
	private string m_message = "";

	private async void ValidateEntity()
	{
		m_message = "";
		View.UpdateReferencedEntities(m_pscData.TeacherId, typeof(Philosopher));
		View.UpdateReferencedEntities(m_pscData.StudentId, typeof(Philosopher));
		var list = (Philosopher?[])View.ReferencedEntities[typeof(Philosopher)];
		if (list == null)
		{
			m_message = "Invalid philosopher ids!";
		}
		else if (list[0] == null || list[1] == null)
		{
			m_message = "Invalid philosopher id!";
		}
		else
		{
			await CreateEntity();
		}
	}

	protected override async Task CreateEntity()
	{
		var list = (Philosopher?[])View.ReferencedEntities[typeof(Philosopher)];

		await View.CreateEntityAsync(new PhilosopherStudentConnection()
		{
			Teacher = list[0],
			Student = list[1],
			PeriodStart = m_pscData.StartDate,
			PeriodEnd = m_pscData.FinishDate
		});
		await FetchData();
	}

	private class PSCData
	{
		public int TeacherId;
		public int StudentId;
		public DateOnly StartDate;
		public DateOnly FinishDate;
	}

}