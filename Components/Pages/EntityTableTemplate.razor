@typeparam TEntity
@using Microsoft.AspNetCore.Components.Authorization
@typeparam TView;
@inject AuthenticationStateProvider AuthenticationStateProvider

<div>
	<CascadingAuthenticationState>
		<AuthorizeView Roles="admin">
			@EntityEditForm
		</AuthorizeView>
	</CascadingAuthenticationState>
	@OptionalEntityFilter
	@PageButtons

	@if (Entities == null)
	{
		<p>
			<em>Loading...</em>
		</p>
	}
	else
	{
		<table class="table">
			<thead>
			<tr>
				@EntityHeaderEntry

				<CascadingAuthenticationState>
					<AuthorizeView Roles="admin">
						<th>Delete</th>
					</AuthorizeView>
				</CascadingAuthenticationState>

			</tr>
			</thead>
			<tbody>
			@foreach (var entity in Entities)
			{
				<tr>
					@EntityTableEntry(entity)

					<CascadingAuthenticationState>
						<AuthorizeView Roles="admin">
							@EntityDeleteButton(entity)
						</AuthorizeView>
					</CascadingAuthenticationState>
				</tr>
			}
			</tbody>
		</table>
	}

</div>

@code
{
	[Parameter, EditorRequired]
	public TView View { get; set; }

	[Parameter, EditorRequired]
	public RenderFragment<TEntity> EntityTableEntry { get; set; }

	[Parameter, EditorRequired]
	public RenderFragment<TEntity> EntityDeleteButton { get; set; }

	[Parameter, EditorRequired]
	public RenderFragment EntityHeaderEntry { get; set; }

	[Parameter, EditorRequired]
	public RenderFragment PageButtons { get; set; }

	[Parameter, EditorRequired]
	public RenderFragment EntityEditForm { get; set; }
	[Parameter]
	public RenderFragment OptionalEntityFilter{ get; set; }

	[Parameter, EditorRequired]
	public IReadOnlyList<TEntity>? Entities { get; set; }
}